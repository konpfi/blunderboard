stages:
  - build
  - deploy

# Image bauen und in GitLab Registry pushen
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE:latest

# Deployment auf den Server
deploy:
  stage: deploy
  image: alpine:3.19
  before_script:
    - apk add --no-cache openssh-client rsync bash
  script:
    # SSH-Key
    - mkdir -p ~/.ssh
    - printf "%s" "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519

    # Sanity checks
    - test -n "$SSH_HOST" || (echo "ERROR: SSH_HOST not set"; exit 1)
    - test -n "$SSH_USER" || (echo "ERROR: SSH_USER not set"; exit 1)

    # Remote Verzeichnis anlegen
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" 'mkdir -p ~/blunderboard'

    # Projektdateien hochsyncen (Compose + Configs). Passe die Includes an DEIN Repo an:
    - rsync -az --delete -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
      docker-compose.yml monitoring db data \
      "$SSH_USER@$SSH_HOST:~/blunderboard/"

    # .env mit Secrets auf dem Server schreiben (fÃ¼r Compose)
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" \
      "bash -lc 'cd ~/blunderboard && printf \"POSTGRES_PASSWORD=%s\n\" \"$POSTGRES_PASSWORD\" > .env'"

    # Login in Registry + Pull/Up
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" \
      "bash -lc 'echo \"$CI_REGISTRY_PASSWORD\" | docker login -u \"$CI_REGISTRY_USER\" --password-stdin \"$CI_REGISTRY\"; cd ~/blunderboard; docker compose pull || true; docker compose up -d --build'"

