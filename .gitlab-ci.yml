stages:
  - build
  - deploy

# 1) Image bauen und in GitLab Registry pushen
build:
  stage: build
  image: docker:27
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""   # nötig für dind ohne TLS
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - docker build -t "$CI_REGISTRY_IMAGE:latest" .
    - docker push "$CI_REGISTRY_IMAGE:latest"

# 2) Deployment auf den Server
deploy:
  stage: deploy
  image: alpine:3.19
  before_script:
    - apk add --no-cache openssh-client bash coreutils
    - mkdir -p ~/.ssh
    # Private Key aus Base64 decodieren
    - echo "$SSH_PRIVATE_KEY_B64" | base64 -d > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    # Debug: prüfen, ob Key valide ist
    - ssh-keygen -lf ~/.ssh/id_ed25519 || (echo "Invalid SSH key" && exit 1)
  script:
    # 1) Verbindung testen
    - ssh -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" 'hostname && whoami'

    # 2) Zielordner anlegen
    - ssh -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" 'mkdir -p ~/blunderboard'

    # 3) Compose-Datei hochladen
    - scp -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no docker-compose.yml "$SSH_USER@$SSH_HOST:~/blunderboard/docker-compose.yml"

    # 4) Login in Registryso + Compose ausführen
    - >
      ssh -o IdentitiesOnly=yes -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "bash -lc '
      cd ~/blunderboard;
      export CI_REGISTRY_IMAGE=\"$CI_REGISTRY_IMAGE\";
      export POSTGRES_PASSWORD=\"$POSTGRES_PASSWORD\";
      echo \"$CI_REGISTRY_PASSWORD\" | docker login -u \"$CI_REGISTRY_USER\" --password-stdin \"$CI_REGISTRY\";
      docker compose pull || true;
      docker compose up -d;
      '"
